name: API Monitoring CI/CD

on:
  schedule:
    - cron: '0 */2 * * *'  # Run every 2 hours
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apilens
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        site: [testsite, healthmug, example]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Node dependencies
      run: npm install
    
    - name: Install Python dependencies
      run: |
        cd python
        pip install -r requirements.txt
        pip install psycopg2-binary
    
    - name: Setup Database
      env:
        PGPASSWORD: postgres
        DB_HOST: localhost
        DB_NAME: apilens
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_PORT: 5432
      run: |
        mkdir -p database
        echo 'CREATE TABLE IF NOT EXISTS sites (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) UNIQUE NOT NULL,
            base_url VARCHAR(500) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS test_runs (
            id SERIAL PRIMARY KEY,
            site_id INTEGER REFERENCES sites(id),
            run_id VARCHAR(100) NOT NULL,
            timestamp TIMESTAMP NOT NULL,
            total_endpoints INTEGER,
            total_failures INTEGER,
            total_empty_responses INTEGER,
            avg_health_score DECIMAL(5,2),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS endpoint_results (
            id SERIAL PRIMARY KEY,
            test_run_id INTEGER REFERENCES test_runs(id),
            endpoint VARCHAR(500) NOT NULL,
            method VARCHAR(10) NOT NULL,
            status_code INTEGER,
            latency INTEGER,
            response_size INTEGER,
            is_empty BOOLEAN,
            success BOOLEAN,
            health_score INTEGER,
            error_message TEXT,
            timestamp TIMESTAMP NOT NULL
        );
        
        CREATE TABLE IF NOT EXISTS alerts (
            id SERIAL PRIMARY KEY,
            site_id INTEGER REFERENCES sites(id),
            endpoint VARCHAR(500),
            alert_type VARCHAR(50) NOT NULL,
            threshold_value DECIMAL(10,2),
            current_value DECIMAL(10,2),
            message TEXT,
            status VARCHAR(20) DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            resolved_at TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(100) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            role VARCHAR(50) DEFAULT 'viewer',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS user_site_access (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            site_id INTEGER REFERENCES sites(id),
            access_level VARCHAR(50) DEFAULT 'read',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, site_id)
        );' > database/schema.sql
        
        psql -h localhost -U postgres -d apilens -f database/schema.sql

    - name: Create Config Files
      run: |
        mkdir -p configs
        echo '{
          "site": "testsite",
          "baseUrl": "https://httpbin.org",
          "endpoints": [
            {"path": "/get", "method": "GET"},
            {"path": "/status/200", "method": "GET"},
            {"path": "/delay/1", "method": "GET"}
          ],
          "settings": {
            "defaultTimeout": 5000,
            "defaultRetries": 1,
            "userAgent": "ApiLens/2.0"
          }
        }' > configs/testsite.json
        
        echo '{
          "site": "healthmug",
          "baseUrl": "https://httpbin.org",
          "endpoints": [
            {"path": "/get", "method": "GET"},
            {"path": "/status/200", "method": "GET"}
          ],
          "settings": {
            "defaultTimeout": 5000,
            "defaultRetries": 1,
            "userAgent": "ApiLens/2.0"
          }
        }' > configs/healthmug.json
        
        echo '{
          "site": "example",
          "baseUrl": "https://httpbin.org",
          "endpoints": [
            {"path": "/get", "method": "GET"}
          ],
          "settings": {
            "defaultTimeout": 5000,
            "defaultRetries": 1,
            "userAgent": "ApiLens/2.0"
          }
        }' > configs/example.json
        
        mkdir -p logs/testsite logs/healthmug logs/example
    
    - name: Run API Tests
      env:
        DB_HOST: localhost
        DB_NAME: apilens
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_PORT: 5432
      run: |
        node cli-tool.js test --site ${{ matrix.site }}
    
    - name: Check Health Alerts
      env:
        DB_HOST: localhost
        DB_NAME: apilens
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_PORT: 5432
      run: |
        cd python
        echo "from database_manager import DatabaseManager" > check_alerts.py
        echo "db = DatabaseManager()" >> check_alerts.py
        echo "print(f'Checking alerts for ${{ matrix.site }}')" >> check_alerts.py
        echo "print(f'Database connection successful')" >> check_alerts.py
        python check_alerts.py
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.site }}
        path: |
          logs/${{ matrix.site }}/
          *.html
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "API monitoring failed for ${{ matrix.site }}"
        # Uncomment when Slack webhook is configured
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"API monitoring failed for ${{ matrix.site }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-dashboard:
    needs: api-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production
      run: |
        echo "Deploying dashboard updates..."
        echo "Dashboard deployment would happen here in production"
        mkdir -p dashboard-output
        echo "Dashboard deployed at $(date)" > dashboard-output/deployment.log
    
    - name: Upload Dashboard Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dashboard-artifacts
        path: dashboard-output/